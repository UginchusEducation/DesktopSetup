-- This doc for special tips that I found around internet and with my expirience
----------- UI Block -------------

------ ### Sources

https://benui.ca/unreal/uproperty/

--------------

------ @@@ UPROPERTY

UPROPERTY()

--- Inside (X,Y,Z)

EditDefaultsOnly
VisibleAnywhere

BlueprintReadOnly 
BlueprintReadWrite

meta = (Categories = "Abilities.Fire") -- For tag filter

Categories = "Default" -- For categories in details

----------------

--- Examples

UPROPERTY(VisibleAnywhere, BlueprintReadOnly)

UPROPERTY(VisibleAnywhere, BlueprintReadOnly, meta = (Categories = "Abilities.Fire"))
FGameplayTag DefaultTag;

------------

--------------------

------ @@@ UFUNCTION

UFUNCTION()

---Inside (X,Y,Z)

BlueprintNativeEvent

NetMulticast
Reliable

------ @@@ Spawn Actor

--- Instant Spawn
const FActorSpawnParameters SpawnInfo;
ActorRef = GetWorld()->SpawnActor<AActorClass>(
    ActorClassRef, 
    ActorLocation, 
    ActorRotation, 
    SpawnInfo);

--- 

---------------------

--------@@@ Validation

- Stop the project with crush
checkf(LevelUpInfo, TEXT("Unabled to find LevelUpInfo. Please fill out PlayerState Blueprint"));

--------@@@ UE_LOG

---- Debug init category

DEFINE_LOG_CATEGORY_STATIC(LogBasePickup, All, All);
UE_LOG(LogBasePickup, Display, TEXT("Player %s is dead"), *GetName());

---- String example 

UE_LOG(LogXena, Warning, TEXT("Attribute Tag === %s"), *AttributeTag.ToString());

---- Integer example

UE_LOG(LogXena, Warning, TEXT("Attribute Tag === %d"), Amount);

----------------------

--------@@@ Operators

--- Ternary

variable = (condition) ? expressionTrue : expressionFalse;

-----------

----------------------

-------- @@@ GameplayTag

const FGameplayTag StateTag = FWitchGameplayTags::Get().Controller_State_Transition;

CurrentLocationTag.MatchesTagExact(TransitionTag)

---------------------

------------- @@@ Timers

FTimerHandle FuzeTimerHandle;
  
GetWorld()->GetTimerManager().SetTimer(
    FuzeTimerHandle, // handle to cancel timer at a later time
    this, // the owning object
    &ASBombActor::OnExplode, // function to call on elapsed
    MaxFuzeTime, // float delay until elapsed
    false); // looping

-------------------------